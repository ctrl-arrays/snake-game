import tkinter as tk
import random
# Game Configuration
WIDTH = 600
HEIGHT = 400
SPEED = 100
SPACE_SIZE = 20
BODY_PARTS = 3
SNAKE_COLOR = "#00FFFF" # Cyan Blue
FOOD_COLOR = "#FF0000" # Red
BACKGROUND_COLOR = "#000000" # Black

direction = "right" 

 # Collision Detection
def check_collisions(snake):
        x, y = snake.coordinates[0]
        # Collision with walls
        if x < 0 or x >= WIDTH or y < 0 or y >= HEIGHT:
            return True
        # Collision with self
        for body_part in snake.coordinates[1:]:
            if x == body_part[0] and y == body_part[1]:
                return True     
        return False
 # Game Over Screen
def game_over(canvas):
        canvas.delete(tk.ALL)
        canvas.create_text(WIDTH / 2, HEIGHT / 2,
                           font=("Arial", 30),
                           text="GAME OVER", fill="red", tag="gameover")
# Snake Class
class Snake:
    def __init__(self, canvas):
        self.body_size = BODY_PARTS
        self.coordinates = []
        self.squares = []
        # Initialize the snaks's body position 0,0
        for i in range(0, BODY_PARTS):
            self.coordinates.append([0, 0])
        # Create square graphics for each body part
        for x, y in self.coordinates:
            square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag="snake")
            self.squares.append(square)
# Food Class
class Food:
    def __init__(self, canvas):
        # Random x and y position for food
        x = random.randint(0, (WIDTH // SPACE_SIZE) - 1) * SPACE_SIZE
        y = random.randint(0, (HEIGHT // SPACE_SIZE) - 1) * SPACE_SIZE

        self.coordinates = [x, y]
        # Draw the food
        self.shape = canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tag="food")
# Turn logic
def next_turn(snake, food, canvas, window):
    # Get current head coordinates
    x, y = snake.coordinates[0]
    # Move in current direction
    if direction == "up":
        y -= SPACE_SIZE
    elif direction == "down":
        y += SPACE_SIZE
    elif direction == "left":
        x -= SPACE_SIZE
    elif direction == "right":
         x += SPACE_SIZE
        # Insert new head position
    snake.coordinates.insert(0, [x, y])
        # Draw new head square
    square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR)
    snake.squares.insert(0, square) 
        # Check if snake ate food
    if x == food.coordinates[0] and y == food.coordinates[1]:
        canvas.delete("food")
        food = Food(canvas)
    else:
        del snake.coordinates[-1]
        canvas.delete(snake.squares[-1])
        del snake.squares[-1]
        # Check for collision
    if check_collisions(snake):
        game_over(canvas)
    else:
        window.after(SPEED, next_turn, snake, food, canvas, window)
# Direction Control
def change_direction(new_direction):
    global direction 
    # Prevent reversing into itself
    if new_direction == "left" and direction != "right":
        direction = new_direction
    elif new_direction == "right" and direction !="left":
        direction = new_direction
    elif new_direction == "up" and direction != "down":
        direction = new_direction
    elif new_direction == "down" and direction != "up":
        direction = new_direction
# Setup main window
window = tk.Tk()
window.title("Snake Game")
window.resizable(False, False)
# Create a canvas to draw the game
canvas = tk.Canvas(window, bg=BACKGROUND_COLOR, height=HEIGHT, width=WIDTH)
canvas.pack()
# Initial direction
direction ="right"
# Create snake and food objects
snake = Snake(canvas)
food = Food(canvas)
# Start game loop
next_turn(snake, food, canvas, window)
# Keyborad bindings for direction change
window.bind("<Left>", lambda event: change_direction("left"))
window.bind("<Right>", lambda event: change_direction("right"))
window.bind("<Up>", lambda event: change_direction("up"))
window.bind("<Down>", lambda event: change_direction("down"))
# Start the GUI event loop
window.mainloop()
    
